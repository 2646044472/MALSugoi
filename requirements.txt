import requests
from bs4 import BeautifulSoup
import time

# 定义基础URL和请求头
base_url = 'https://myanimelist.net/topanime.php'
headers = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36'
}

# 存储所有动漫信息的列表
anime_list = []

# 页数控制（每页显示50个动漫）
page = 0

# 循环直到抓取到100个动漫为止
while len(anime_list) < 100:
    # 构建分页URL
    url = f"{base_url}?limit={page * 50}"
    
    # 发送请求
    response = requests.get(url, headers=headers)
    
    # 检查请求是否成功
    if response.status_code != 200:
        print(f"Failed to retrieve page {page + 1}. Status code: {response.status_code}")
        break

    # 使用BeautifulSoup解析页面
    soup = BeautifulSoup(response.text, 'html.parser')

    # 查找每个动漫条目
    anime_entries = soup.find_all('tr', {'class': 'ranking-list'})

    for entry in anime_entries:
        # 抓取标题
        title_tag = entry.find('h3', {'class': 'anime_ranking_h3'})
        title = title_tag.text.strip() if title_tag else 'Title not found'

        # 抓取评分
        score_tag = entry.find('td', {'class': 'score'})
        score = score_tag.text.strip() if score_tag else 'Score not found'

        # 抓取详情页URL
        anime_url_tag = title_tag.find('a') if title_tag else None
        anime_url = anime_url_tag['href'] if anime_url_tag else None

        # 抓取动漫详情页的简介
        synopsis = 'Synopsis not found'  # 默认值
        if anime_url:
            # 请求动漫详情页
            anime_response = requests.get(anime_url, headers=headers)
            if anime_response.status_code == 200:
                anime_soup = BeautifulSoup(anime_response.text, 'html.parser')
                synopsis_tag = anime_soup.find('p', {'itemprop': 'description'})
                synopsis = synopsis_tag.text.strip() if synopsis_tag else 'Synopsis not found'
            else:
                print(f"Failed to retrieve anime details from {anime_url}")

        # 添加到动漫列表
        anime_list.append({
            'title': title,
            'score': score,
            'synopsis': synopsis
        })

        # 如果已经抓取到100个动漫，停止抓取
        if len(anime_list) >= 100:
            break

    # 打印当前进度
    print(f"Page {page + 1} processed. Total anime fetched: {len(anime_list)}")

    # 翻到下一页
    page += 1

    # 为了避免过于频繁的请求，添加一个延迟
    time.sleep(1)

# 打印抓取的动漫信息
for i, anime in enumerate(anime_list, 1):
    print(f"{i}. Title: {anime['title']}, Score: {anime['score']}")
    print(f"   Synopsis: {anime['synopsis']}\n")